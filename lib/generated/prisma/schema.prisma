generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password      String
  name          String
  role          UserRole     @default(EMPLOYEE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  assignedTasks Task[]       @relation("AssignedTasks")
  createdTasks  Task[]       @relation("CreatedTasks")
  comments      Comment[]
  uploads       Attachment[]
  messages      Message[]
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String
  status       TaskStatus   @default(PENDING)
  priority     String       @default("MEDIUM")
  dueDate      DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignee     User         @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId   String
  creator      User         @relation("CreatedTasks", fields: [creatorId], references: [id])
  creatorId    String
  files        File[]
  comments     Comment[]
  attachments  Attachment[]
  relatedTasks String[]     @default([])
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  type      String
  size      Int
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Attachment {
  id           String   @id @default(cuid())
  name         String
  type         String
  size         Int
  url          String
  driveFileId  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
}

enum UserRole {
  EMPLOYEE
  PARTNER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
